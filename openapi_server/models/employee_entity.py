# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.employee import Employee
from openapi_server import util


class EmployeeEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignments=None, id=None, name=None, email=None, role=None, has_accepted_terms=None, date_terms_accepted=None, terms_version_number=None):  # noqa: E501
        """EmployeeEntity - a model defined in OpenAPI

        :param assignments: The assignments of this EmployeeEntity.  # noqa: E501
        :type assignments: List[EmployeeAssignment]
        :param id: The id of this EmployeeEntity.  # noqa: E501
        :type id: str
        :param name: The name of this EmployeeEntity.  # noqa: E501
        :type name: str
        :param email: The email of this EmployeeEntity.  # noqa: E501
        :type email: str
        :param role: The role of this EmployeeEntity.  # noqa: E501
        :type role: str
        :param has_accepted_terms: The has_accepted_terms of this EmployeeEntity.  # noqa: E501
        :type has_accepted_terms: bool
        :param date_terms_accepted: The date_terms_accepted of this EmployeeEntity.  # noqa: E501
        :type date_terms_accepted: date
        :param terms_version_number: The terms_version_number of this EmployeeEntity.  # noqa: E501
        :type terms_version_number: float
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'email': str,
            'role': str,
            'has_accepted_terms': bool,
            'date_terms_accepted': date,
            'terms_version_number': float
        }

        self.attribute_map = {
            'assignments': 'assignments',
            'id': 'id',
            'name': 'name',
            'email': 'email',
            'role': 'role',
            'has_accepted_terms': 'hasAcceptedTerms',
            'date_terms_accepted': 'dateTermsAccepted',
            'terms_version_number': 'termsVersionNumber'
        }

        self._assignments = assignments
        self._id = id
        self._name = name
        self._email = email
        self._role = role
        self._has_accepted_terms = has_accepted_terms
        self._date_terms_accepted = date_terms_accepted
        self._terms_version_number = terms_version_number

    @classmethod
    def from_dict(cls, dikt) -> 'EmployeeEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmployeeEntity of this EmployeeEntity.  # noqa: E501
        :rtype: EmployeeEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignments(self):
        """Gets the assignments of this EmployeeEntity.

        Projects for which the employee has been assigned to a SurveyGroup  # noqa: E501

        :return: The assignments of this EmployeeEntity.
        :rtype: List[EmployeeAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this EmployeeEntity.

        Projects for which the employee has been assigned to a SurveyGroup  # noqa: E501

        :param assignments: The assignments of this EmployeeEntity.
        :type assignments: List[EmployeeAssignment]
        """

        self._assignments = assignments

    @property
    def id(self):
        """Gets the id of this EmployeeEntity.

        Employee's RedHat Kerberos ID  # noqa: E501

        :return: The id of this EmployeeEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeEntity.

        Employee's RedHat Kerberos ID  # noqa: E501

        :param id: The id of this EmployeeEntity.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EmployeeEntity.

        Name of the employee.  # noqa: E501

        :return: The name of this EmployeeEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EmployeeEntity.

        Name of the employee.  # noqa: E501

        :param name: The name of this EmployeeEntity.
        :type name: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this EmployeeEntity.

        The email address of the employee.  # noqa: E501

        :return: The email of this EmployeeEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmployeeEntity.

        The email address of the employee.  # noqa: E501

        :param email: The email of this EmployeeEntity.
        :type email: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this EmployeeEntity.

        The role of the employee. For example, consultant, PM, TSM, etc.  # noqa: E501

        :return: The role of this EmployeeEntity.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this EmployeeEntity.

        The role of the employee. For example, consultant, PM, TSM, etc.  # noqa: E501

        :param role: The role of this EmployeeEntity.
        :type role: str
        """

        self._role = role

    @property
    def has_accepted_terms(self):
        """Gets the has_accepted_terms of this EmployeeEntity.

        Whether the employee has accepted the terms of the usage agreement.  # noqa: E501

        :return: The has_accepted_terms of this EmployeeEntity.
        :rtype: bool
        """
        return self._has_accepted_terms

    @has_accepted_terms.setter
    def has_accepted_terms(self, has_accepted_terms):
        """Sets the has_accepted_terms of this EmployeeEntity.

        Whether the employee has accepted the terms of the usage agreement.  # noqa: E501

        :param has_accepted_terms: The has_accepted_terms of this EmployeeEntity.
        :type has_accepted_terms: bool
        """

        self._has_accepted_terms = has_accepted_terms

    @property
    def date_terms_accepted(self):
        """Gets the date_terms_accepted of this EmployeeEntity.

        The date the employee accepted the terms of the usage agreement.  # noqa: E501

        :return: The date_terms_accepted of this EmployeeEntity.
        :rtype: date
        """
        return self._date_terms_accepted

    @date_terms_accepted.setter
    def date_terms_accepted(self, date_terms_accepted):
        """Sets the date_terms_accepted of this EmployeeEntity.

        The date the employee accepted the terms of the usage agreement.  # noqa: E501

        :param date_terms_accepted: The date_terms_accepted of this EmployeeEntity.
        :type date_terms_accepted: date
        """

        self._date_terms_accepted = date_terms_accepted

    @property
    def terms_version_number(self):
        """Gets the terms_version_number of this EmployeeEntity.

        The version number of terms of the usage agreement.  # noqa: E501

        :return: The terms_version_number of this EmployeeEntity.
        :rtype: float
        """
        return self._terms_version_number

    @terms_version_number.setter
    def terms_version_number(self, terms_version_number):
        """Sets the terms_version_number of this EmployeeEntity.

        The version number of terms of the usage agreement.  # noqa: E501

        :param terms_version_number: The terms_version_number of this EmployeeEntity.
        :type terms_version_number: float
        """

        self._terms_version_number = terms_version_number
