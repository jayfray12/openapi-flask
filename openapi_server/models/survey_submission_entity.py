# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.employee import Employee
from openapi_server.models.employee_entity import EmployeeEntity
from openapi_server.models.skill_rating_entity import SkillRatingEntity
from openapi_server.models.survey_group_entity import SurveyGroupEntity
from openapi_server.models.survey_submission import SurveySubmission
from openapi_server import util

from openapi_server.models.employee import Employee  # noqa: E501
from openapi_server.models.employee_entity import EmployeeEntity  # noqa: E501
from openapi_server.models.skill_rating_entity import SkillRatingEntity  # noqa: E501
from openapi_server.models.survey_group_entity import SurveyGroupEntity  # noqa: E501
from openapi_server.models.survey_submission import SurveySubmission  # noqa: E501

class SurveySubmissionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, survey_group=None, ratings=None, survey_author_entity=None, survey_subject_entity=None, disabled=False, id=None, survey_author=None, survey_subject=None, submission_date=None, submission_status=None, feedback=None):  # noqa: E501
        """SurveySubmissionEntity - a model defined in OpenAPI

        :param survey_group: The survey_group of this SurveySubmissionEntity.  # noqa: E501
        :type survey_group: SurveyGroupEntity
        :param ratings: The ratings of this SurveySubmissionEntity.  # noqa: E501
        :type ratings: List[SkillRatingEntity]
        :param survey_author_entity: The survey_author_entity of this SurveySubmissionEntity.  # noqa: E501
        :type survey_author_entity: EmployeeEntity
        :param survey_subject_entity: The survey_subject_entity of this SurveySubmissionEntity.  # noqa: E501
        :type survey_subject_entity: EmployeeAssignment
        :param disabled: The disabled of this SurveySubmissionEntity.  # noqa: E501
        :type disabled: bool
        :param id: The id of this SurveySubmissionEntity.  # noqa: E501
        :type id: str
        :param survey_author: The survey_author of this SurveySubmissionEntity.  # noqa: E501
        :type survey_author: Employee
        :param survey_subject: The survey_subject of this SurveySubmissionEntity.  # noqa: E501
        :type survey_subject: EmployeeAssignment
        :param submission_date: The submission_date of this SurveySubmissionEntity.  # noqa: E501
        :type submission_date: datetime
        :param submission_status: The submission_status of this SurveySubmissionEntity.  # noqa: E501
        :type submission_status: str
        :param feedback: The feedback of this SurveySubmissionEntity.  # noqa: E501
        :type feedback: str
        """
        self.openapi_types = {
            'survey_group': SurveyGroupEntity,
            'ratings': List[SkillRatingEntity],
            'survey_author_entity': EmployeeEntity,
            'disabled': bool,
            'id': str,
            'survey_author': Employee,
            'submission_date': datetime,
            'submission_status': str,
            'feedback': str
        }

        self.attribute_map = {
            'survey_group': 'surveyGroup',
            'ratings': 'ratings',
            'survey_author_entity': 'surveyAuthorEntity',
            'survey_subject_entity': 'surveySubjectEntity',
            'disabled': 'disabled',
            'id': 'id',
            'survey_author': 'surveyAuthor',
            'survey_subject': 'surveySubject',
            'submission_date': 'submissionDate',
            'submission_status': 'submissionStatus',
            'feedback': 'feedback'
        }

        self._survey_group = survey_group
        self._ratings = ratings
        self._survey_author_entity = survey_author_entity
        self._survey_subject_entity = survey_subject_entity
        self._disabled = disabled
        self._id = id
        self._survey_author = survey_author
        self._survey_subject = survey_subject
        self._submission_date = submission_date
        self._submission_status = submission_status
        self._feedback = feedback

    @classmethod
    def from_dict(cls, dikt) -> 'SurveySubmissionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SurveySubmissionEntity of this SurveySubmissionEntity.  # noqa: E501
        :rtype: SurveySubmissionEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def survey_group(self):
        """Gets the survey_group of this SurveySubmissionEntity.

        A GUID that uniquely identifies the project.  # noqa: E501

        :return: The survey_group of this SurveySubmissionEntity.
        :rtype: SurveyGroupEntity
        """
        return self._survey_group

    @survey_group.setter
    def survey_group(self, survey_group):
        """Sets the survey_group of this SurveySubmissionEntity.

        A GUID that uniquely identifies the project.  # noqa: E501

        :param survey_group: The survey_group of this SurveySubmissionEntity.
        :type survey_group: SurveyGroupEntity
        """

        self._survey_group = survey_group

    @property
    def ratings(self):
        """Gets the ratings of this SurveySubmissionEntity.

        SkillRatings for the subject employee  # noqa: E501

        :return: The ratings of this SurveySubmissionEntity.
        :rtype: List[SkillRatingEntity]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this SurveySubmissionEntity.

        SkillRatings for the subject employee  # noqa: E501

        :param ratings: The ratings of this SurveySubmissionEntity.
        :type ratings: List[SkillRatingEntity]
        """

        self._ratings = ratings

    @property
    def survey_author_entity(self):
        """Gets the survey_author_entity of this SurveySubmissionEntity.

        The Kerberos Id for the employee that is answering the questions of the survey.  # noqa: E501

        :return: The survey_author_entity of this SurveySubmissionEntity.
        :rtype: EmployeeEntity
        """
        return self._survey_author_entity

    @survey_author_entity.setter
    def survey_author_entity(self, survey_author_entity):
        """Sets the survey_author_entity of this SurveySubmissionEntity.

        The Kerberos Id for the employee that is answering the questions of the survey.  # noqa: E501

        :param survey_author_entity: The survey_author_entity of this SurveySubmissionEntity.
        :type survey_author_entity: EmployeeEntity
        """

        self._survey_author_entity = survey_author_entity

    @property
    def survey_subject_entity(self):
        """Gets the survey_subject_entity of this SurveySubmissionEntity.

        A Kerberos Id for the employee that is being reviewed.  # noqa: E501

        :return: The survey_subject_entity of this SurveySubmissionEntity.
        :rtype: EmployeeAssignment
        """
        return self._survey_subject_entity

    @survey_subject_entity.setter
    def survey_subject_entity(self, survey_subject_entity):
        """Sets the survey_subject_entity of this SurveySubmissionEntity.

        A Kerberos Id for the employee that is being reviewed.  # noqa: E501

        :param survey_subject_entity: The survey_subject_entity of this SurveySubmissionEntity.
        :type survey_subject_entity: EmployeeAssignment
        """

        self._survey_subject_entity = survey_subject_entity

    @property
    def disabled(self):
        """Gets the disabled of this SurveySubmissionEntity.

        A flag indicating if this Survey Submission is disabled  # noqa: E501

        :return: The disabled of this SurveySubmissionEntity.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SurveySubmissionEntity.

        A flag indicating if this Survey Submission is disabled  # noqa: E501

        :param disabled: The disabled of this SurveySubmissionEntity.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def id(self):
        """Gets the id of this SurveySubmissionEntity.

        A GUID that uniquely identifies a survey submitted for a project.  # noqa: E501

        :return: The id of this SurveySubmissionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SurveySubmissionEntity.

        A GUID that uniquely identifies a survey submitted for a project.  # noqa: E501

        :param id: The id of this SurveySubmissionEntity.
        :type id: str
        """

        self._id = id

    @property
    def survey_author(self):
        """Gets the survey_author of this SurveySubmissionEntity.

        Employee that is reviewing.  # noqa: E501

        :return: The survey_author of this SurveySubmissionEntity.
        :rtype: Employee
        """
        return self._survey_author

    @survey_author.setter
    def survey_author(self, survey_author):
        """Sets the survey_author of this SurveySubmissionEntity.

        Employee that is reviewing.  # noqa: E501

        :param survey_author: The survey_author of this SurveySubmissionEntity.
        :type survey_author: Employee
        """

        self._survey_author = survey_author

    @property
    def survey_subject(self):
        """Gets the survey_subject of this SurveySubmissionEntity.

        Employee that is being reviewed.  # noqa: E501

        :return: The survey_subject of this SurveySubmissionEntity.
        :rtype: EmployeeAssignment
        """
        return self._survey_subject

    @survey_subject.setter
    def survey_subject(self, survey_subject):
        """Sets the survey_subject of this SurveySubmissionEntity.

        Employee that is being reviewed.  # noqa: E501

        :param survey_subject: The survey_subject of this SurveySubmissionEntity.
        :type survey_subject: EmployeeAssignment
        """

        self._survey_subject = survey_subject

    @property
    def submission_date(self):
        """Gets the submission_date of this SurveySubmissionEntity.

        The date the survey was submitted to the Feedback 360 Survey API in UTC.  # noqa: E501

        :return: The submission_date of this SurveySubmissionEntity.
        :rtype: datetime
        """
        return self._submission_date

    @submission_date.setter
    def submission_date(self, submission_date):
        """Sets the submission_date of this SurveySubmissionEntity.

        The date the survey was submitted to the Feedback 360 Survey API in UTC.  # noqa: E501

        :param submission_date: The submission_date of this SurveySubmissionEntity.
        :type submission_date: datetime
        """

        self._submission_date = submission_date

    @property
    def submission_status(self):
        """Gets the submission_status of this SurveySubmissionEntity.

        Returns a status of \"Complete\" or \"Incomplete\"  # noqa: E501

        :return: The submission_status of this SurveySubmissionEntity.
        :rtype: str
        """
        return self._submission_status

    @submission_status.setter
    def submission_status(self, submission_status):
        """Sets the submission_status of this SurveySubmissionEntity.

        Returns a status of \"Complete\" or \"Incomplete\"  # noqa: E501

        :param submission_status: The submission_status of this SurveySubmissionEntity.
        :type submission_status: str
        """
        allowed_values = ["Complete", "Incomplete"]  # noqa: E501
        if submission_status not in allowed_values:
            raise ValueError(
                "Invalid value for `submission_status` ({0}), must be one of {1}"
                .format(submission_status, allowed_values)
            )

        self._submission_status = submission_status

    @property
    def feedback(self):
        """Gets the feedback of this SurveySubmissionEntity.

        Any feedback the author of the survey would like to include in the rating.  # noqa: E501

        :return: The feedback of this SurveySubmissionEntity.
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this SurveySubmissionEntity.

        Any feedback the author of the survey would like to include in the rating.  # noqa: E501

        :param feedback: The feedback of this SurveySubmissionEntity.
        :type feedback: str
        """

        self._feedback = feedback
