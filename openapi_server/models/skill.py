# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Skill(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, skills_base_id=None, skill=None, description=None, category=None, active=True):  # noqa: E501
        """Skill - a model defined in OpenAPI

        :param id: The id of this Skill.  # noqa: E501
        :type id: str
        :param skills_base_id: The skills_base_id of this Skill.  # noqa: E501
        :type skills_base_id: int
        :param skill: The skill of this Skill.  # noqa: E501
        :type skill: str
        :param description: The description of this Skill.  # noqa: E501
        :type description: str
        :param category: The category of this Skill.  # noqa: E501
        :type category: str
        :param active: The active of this Skill.  # noqa: E501
        :type active: bool
        """
        self.openapi_types = {
            'id': str,
            'skills_base_id': int,
            'skill': str,
            'description': str,
            'category': str,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'skills_base_id': 'skillsBaseId',
            'skill': 'skill',
            'description': 'description',
            'category': 'category',
            'active': 'active'
        }

        self._id = id
        self._skills_base_id = skills_base_id
        self._skill = skill
        self._description = description
        self._category = category
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Skill':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Skill of this Skill.  # noqa: E501
        :rtype: Skill
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Skill.

        A GUID that uniquely identifies a skill.  # noqa: E501

        :return: The id of this Skill.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Skill.

        A GUID that uniquely identifies a skill.  # noqa: E501

        :param id: The id of this Skill.
        :type id: str
        """

        self._id = id

    @property
    def skills_base_id(self):
        """Gets the skills_base_id of this Skill.

        An id from skills base  # noqa: E501

        :return: The skills_base_id of this Skill.
        :rtype: int
        """
        return self._skills_base_id

    @skills_base_id.setter
    def skills_base_id(self, skills_base_id):
        """Sets the skills_base_id of this Skill.

        An id from skills base  # noqa: E501

        :param skills_base_id: The skills_base_id of this Skill.
        :type skills_base_id: int
        """

        self._skills_base_id = skills_base_id

    @property
    def skill(self):
        """Gets the skill of this Skill.

        The name of the skill.  # noqa: E501

        :return: The skill of this Skill.
        :rtype: str
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this Skill.

        The name of the skill.  # noqa: E501

        :param skill: The skill of this Skill.
        :type skill: str
        """

        self._skill = skill

    @property
    def description(self):
        """Gets the description of this Skill.

        A description of the skill.  # noqa: E501

        :return: The description of this Skill.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Skill.

        A description of the skill.  # noqa: E501

        :param description: The description of this Skill.
        :type description: str
        """

        self._description = description

    @property
    def category(self):
        """Gets the category of this Skill.

        The general category of the skill.  # noqa: E501

        :return: The category of this Skill.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Skill.

        The general category of the skill.  # noqa: E501

        :param category: The category of this Skill.
        :type category: str
        """

        self._category = category

    @property
    def active(self):
        """Gets the active of this Skill.

        Boolean to state if this skill is active  # noqa: E501

        :return: The active of this Skill.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Skill.

        Boolean to state if this skill is active  # noqa: E501

        :param active: The active of this Skill.
        :type active: bool
        """

        self._active = active
